apiVersion: entity.humanitec.io/v1b1
kind: Definition
metadata:
  id: aws-iam-example-aws-policy-rw
entity:
  criteria:
  - app_id: aws-iam-example
    class: s3-rw
  driver_account: ${resources['config.default#aws-account'].account}
  driver_inputs:
    values:
      credentials_config:
        environment:
          AWS_ACCESS_KEY_ID: "AccessKeyId"
          AWS_SECRET_ACCESS_KEY: "SecretAccessKey"
          AWS_SESSION_TOKEN: "SessionToken"
      runner_mode: managed
      variables:
        region: ${resources['config.default#aws-account'].outputs.region}
        # The Globally Unique Resource ID (GUResID) is useful for ensuring uniqueness
        guresid: ${context.res.guresid}
        s3_arn: ${resources["s3.rw"].outputs.arn}

      script: |
        variable "region" {}
        variable "guresid" {}
        variable "s3_arn" {}

        terraform {
          required_providers {
            aws = {
              source = "hashicorp/aws"
            }
          }
        }

        provider "aws" {
          region     = var.region
        }


        data "aws_iam_policy_document" "s3_read_write" {
          statement {
            sid = "S3ReadWriteContet"
            effect = "Allow"
            actions = [
              "s3:Get*",
              "s3:List*",
              "s3:Describe*"
              "s3:PutObject",
              "s3:AbortMultipartUpload",
              "s3:DeleteObject"
            ]
            resources = [
              var.s3_arn,
              "$\{var.s3_arn}/*"
            ]
          }
        }
        
        resource "aws_iam_policy" "policy" {
          name        = var.guresid
          path        = "/"
          description = "Read Write IAM Policy for S3 bucket $\{var.s3_arn}"

          policy = data.aws_iam_policy_document.s3_read_write.json
        }

        output "arn" {
          value = aws_iam_policy.policy.arn
        }

  driver_type: humanitec/terraform
  name: aws-iam-example-aws-policy-rw
  type: aws-policy